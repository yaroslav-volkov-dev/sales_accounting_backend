generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PaymentMethod {
  CASH
  CARD
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
  CLOSE
}

enum Resource {
  PRODUCT
  CATEGORY
  SUPPLIER
  STORE
  SALE
  SHIFT
  USER
  ROLE
  PERMISSION
  ORGANIZATION
}

model organization {
  id                  String                @id @default(uuid())
  name                String
  ownerId             String
  owner               profile               @relation("OwnedOrganizations", fields: [ownerId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  roles               role[]
  stores              store[]
  organizationMembers organization_member[]
}

model role {
  id             String            @id @default(uuid())
  name           String
  organizationId String
  organization   organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  permissions    role_permission[]
  memberRoles    member_role[]

  @@unique([name, organizationId])
}

model permission {
  id          String            @id @default(uuid())
  action      Action
  resource    Resource
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  roles       role_permission[]

  @@unique([action, resource])
}

model role_permission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
}

model organization_member {
  id             String        @id @default(uuid())
  profileId      String
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  profile        profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  organization   organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  roles          member_role[]

  @@unique([profileId, organizationId])
}

model member_role {
  id        String              @id @default(uuid())
  memberId  String
  roleId    String
  member    organization_member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  role      role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([memberId, roleId])
}

model profile {
  id                  String                @id @default(uuid())
  email               String                @unique
  firstName           String
  lastName            String
  phoneNumber         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sale                sale[]
  memberOrganizations organization_member[]
  ownedOrganizations  organization[]        @relation("OwnedOrganizations")
}

model product {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
  price      Int
  isActive   Boolean   @default(true)
  categoryId Int?
  supplierId Int?
  category   category? @relation(fields: [categoryId], references: [id])
  supplier   supplier? @relation(fields: [supplierId], references: [id])
  sale       sale[]
}

model category {
  id        Int       @id @default(autoincrement())
  name      String
  product   product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
}

model supplier {
  id          Int       @id @default(autoincrement())
  name        String
  phoneNumber String
  product     product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
}

model store {
  id             Int          @id @default(autoincrement())
  name           String
  location       String
  phoneNumber    String
  organizationId String
  organization   organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  shift          shift[]
  sale           sale[]
}

model shift {
  id        Int       @id @default(autoincrement())
  userId    String
  storeId   Int
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  store     store     @relation(fields: [storeId], references: [id])
  sale      sale[]
}

model sale {
  id            Int           @id @default(autoincrement())
  quantity      Int
  sellingPrice  Int
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  productId     Int
  storeId       Int
  shiftId       Int
  userId        String
  product       product       @relation(fields: [productId], references: [id])
  store         store         @relation(fields: [storeId], references: [id])
  shift         shift         @relation(fields: [shiftId], references: [id])
  profile       profile       @relation(fields: [userId], references: [id])
}
